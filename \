import { Hono } from "hono";
import { PrismaClient } from "@prisma/client/edge";
import { withAccelerate } from "@prisma/extension-accelerate";
import { z } from "zod";
 // For password hashing
import { sign, verify } from "hono/jwt";

const prisma = new PrismaClient({}).$extends(withAccelerate());

const app = new Hono<{
  Bindings: {
    DATABASE_URL: string;
    JWT_SECRET: string;
  };
  Variables: {
    userId: string;
  };
}>();

const SignupSchema = z.object({
  email: z.string().email(),
  password: z.string().min(8),
});

const SigninSchema = z.object({
  email: z.string().email(),
  password: z.string().min(8),
});

app.post("/api/v1/signup", async (c) => {
  const body = await c.req.json();
  const signupCredentials = SignupSchema.parse(body);

  const user = await prisma.user.findFirst({
    where: { email: signupCredentials.email },
  });

  if (user) {
    c.status(403);
    return c.json({ message: "User already exists" });
  }

  const newUser = await prisma.user.create({
    data: {
      email: signupCredentials.email,
      password: signupCredentials.password,
    },
  });

  const jwt = sign({ id: newUser.id }, c.env.JWT_SECRET);
  return c.json({ jwt });
});

app.post("/api/v1/signin", async (c) => {
  const body = await c.req.json();
  const signinCredentials = SigninSchema.parse(body);

  const user = await prisma.user.findFirst({
    where: { email: signinCredentials.email },
    select : {
        id: true,
        email : true
    }
  });

  if (!user) {
    c.status(403);
    return c.json({ message: "Invalid email or password" });
  }

  const jwt = await sign( {id : user.id},c.env.JWT_SECRET);
  
  return c.json({ jwt, "message" : "SigninSuccessful" });
});

app.use("/api/v1/blog/*", async (c, next) => {
  const authHeader = c.req.header('Authorization');
  
  if (!authHeader) {
    c.status(403);
    return c.json({ error: "Unauthorized" });
  }

  const token = authHeader.split(' ')[1];
  try {
    const payload = await verify(token, c.env.JWT_SECRET);
    c.set('userId', payload.id);
    await next();
  } catch (error) {
    c.status(401);
    return c.json({ error: "Unauthorized" });
  }
});

app.get("/api/v1/blog/:id", (c) => {
  const id = c.req.param("id");
  console.log(id);
  return c.text(`Get blog post with ID: ${id}`);
});

app.post("/api/v1/blog", async (c) => {
  const userId = c.get('userId');
  // Implement blog creation logic here
  return c.json({ message: `Blog post created by user ID: ${userId}` });
});

app.put("/api/v1/blog/:id", async (c) => {
  const userId = c.get('userId');
  const id = c.req.param("id");
  // Implement blog update logic here
  return c.json({ message: `Blog post with ID: ${id} updated by user ID: ${userId}` });
});

app.get("/", (c) => {
  return c.text("Hi");
});

export default app;

